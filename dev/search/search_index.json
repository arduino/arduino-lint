{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Arduino Lint is a command line tool that checks for common problems with Arduino projects. Its focus is on the structure, metadata, and configuration of Arduino projects, rather than the code. Rules cover specification compliance, Library Manager submission requirements, and best practices. Installation \u00b6 See the installation instructions . Getting started \u00b6 Once installed, you only need to open a terminal at your project folder and run the command: arduino-lint This will automatically detect the project type and check it against the relevant rules. The default configuration of Arduino Lint provides for the most common use case, but you have the option of changing settings via command line flags : Compliance setting \u00b6 The --compliance flag allows you to configure the strictness of the applied rules. The three compliance level values accepted by this flag are: permissive - failure will occur only when severe rule violations are found. Although a project that passes at the permissive setting will work with the current Arduino development software versions, it may not be fully specification-compliant, risking incompatibility or a poor experience for the users. specification - the default setting, enforces compliance with the official Arduino project specifications ( sketch , library , platform ). strict - enforces best practices, above and beyond the minimum requirements for specification compliance. Use this setting to ensure the best experience for the users of the project. Library Manager setting \u00b6 Arduino Library Manager is the best way to provide installation and updates of Arduino libraries. In order to be accepted for inclusion in Library Manager, a library is required to meet some requirements . Arduino Lint provides checks for these requirements as well, controlled by the --library-manager flag. The Library Manager submission-specific rules are enabled via --library-manager submit . Even if your library isn't yet ready to be added to Library Manager, it's a good idea to use this setting to ensure no incompatibilities are introduced. Once your library is in the Library Manager index, each release is automatically picked up and made available to the Arduino community. Releases are also subject to special rules. The command arduino-lint --library-manager update will tell you whether your library is compliant with these rules. Integration \u00b6 The --format flag configures the format of arduino-lint 's output. The default --format text setting provides human readable output. For automation or integration with other tools, the machine readable output provided by --format json may be more convenient. This setting exposes every detail of the rules that were applied. The --report-file flag causes arduino-lint to write the JSON output to the specified file. Environment variables \u00b6 Additional configuration options intended for internal use or development can be set via environment variables: ARDUINO_LINT_OFFICIAL - Set to \"true\" to run the checks that only apply to official Arduino projects. ARDUINO_LINT_LIBRARY_MANAGER_INDEXING - Set to \"true\" to run the checks that apply when adding releases to the Library Manager index. ARDUINO_LINT_LOG_LEVEL - Messages with this level and above will be logged. Supported values: trace , debug , info , warn , error , fatal , panic ARDUINO_LINT_LOG_FORMAT - The output format for the logs. Supported values: text , json Continuous integration \u00b6 Arduino Lint would be a great addition to your continuous integration system. Running the tool after each change to the project can allow you to identify any problems that were introduced. This is easily done by using the arduino/arduino-lint-action GitHub Actions action: https://github.com/arduino/arduino-lint-action Add a simple workflow file to the repository of your Arduino project and GitHub will automatically run Arduino Lint on every pull request and push. Support and feedback \u00b6 You can discuss or get assistance with using Arduino Lint on the Arduino Forum . Feedback is welcome! Please submit feature requests or bug reports to the issue tracker .","title":"Documentation Home"},{"location":"#installation","text":"See the installation instructions .","title":"Installation"},{"location":"#getting-started","text":"Once installed, you only need to open a terminal at your project folder and run the command: arduino-lint This will automatically detect the project type and check it against the relevant rules. The default configuration of Arduino Lint provides for the most common use case, but you have the option of changing settings via command line flags :","title":"Getting started"},{"location":"#compliance-setting","text":"The --compliance flag allows you to configure the strictness of the applied rules. The three compliance level values accepted by this flag are: permissive - failure will occur only when severe rule violations are found. Although a project that passes at the permissive setting will work with the current Arduino development software versions, it may not be fully specification-compliant, risking incompatibility or a poor experience for the users. specification - the default setting, enforces compliance with the official Arduino project specifications ( sketch , library , platform ). strict - enforces best practices, above and beyond the minimum requirements for specification compliance. Use this setting to ensure the best experience for the users of the project.","title":"Compliance setting"},{"location":"#library-manager-setting","text":"Arduino Library Manager is the best way to provide installation and updates of Arduino libraries. In order to be accepted for inclusion in Library Manager, a library is required to meet some requirements . Arduino Lint provides checks for these requirements as well, controlled by the --library-manager flag. The Library Manager submission-specific rules are enabled via --library-manager submit . Even if your library isn't yet ready to be added to Library Manager, it's a good idea to use this setting to ensure no incompatibilities are introduced. Once your library is in the Library Manager index, each release is automatically picked up and made available to the Arduino community. Releases are also subject to special rules. The command arduino-lint --library-manager update will tell you whether your library is compliant with these rules.","title":"Library Manager setting"},{"location":"#integration","text":"The --format flag configures the format of arduino-lint 's output. The default --format text setting provides human readable output. For automation or integration with other tools, the machine readable output provided by --format json may be more convenient. This setting exposes every detail of the rules that were applied. The --report-file flag causes arduino-lint to write the JSON output to the specified file.","title":"Integration"},{"location":"#environment-variables","text":"Additional configuration options intended for internal use or development can be set via environment variables: ARDUINO_LINT_OFFICIAL - Set to \"true\" to run the checks that only apply to official Arduino projects. ARDUINO_LINT_LIBRARY_MANAGER_INDEXING - Set to \"true\" to run the checks that apply when adding releases to the Library Manager index. ARDUINO_LINT_LOG_LEVEL - Messages with this level and above will be logged. Supported values: trace , debug , info , warn , error , fatal , panic ARDUINO_LINT_LOG_FORMAT - The output format for the logs. Supported values: text , json","title":"Environment variables"},{"location":"#continuous-integration","text":"Arduino Lint would be a great addition to your continuous integration system. Running the tool after each change to the project can allow you to identify any problems that were introduced. This is easily done by using the arduino/arduino-lint-action GitHub Actions action: https://github.com/arduino/arduino-lint-action Add a simple workflow file to the repository of your Arduino project and GitHub will automatically run Arduino Lint on every pull request and push.","title":"Continuous integration"},{"location":"#support-and-feedback","text":"You can discuss or get assistance with using Arduino Lint on the Arduino Forum . Feedback is welcome! Please submit feature requests or bug reports to the issue tracker .","title":"Support and feedback"},{"location":"CONTRIBUTING/","text":"How to contribute \u00b6 First of all, thanks for contributing! This document provides some basic guidelines for contributing to this repository. There are several ways you can get involved: Type of contribution Contribution method - Support request - Question - Discussion Post on the Arduino Forum - Bug report - Feature request Issue report (read the issue guidelines ) Beta testing Try out the nightly build - Bug fix - Enhancement Pull Request (read the pull request guidelines ) Monetary - Donate - Buy official products Issue Reports \u00b6 Do you need help or have a question about using Arduino Lint? Support requests should be made to the Arduino forum . High quality bug reports and feature requests are valuable contributions to the Arduino Lint project. Before reporting an issue \u00b6 Give the nightly build a test drive to see if your issue was already resolved. Search existing pull requests and issues to see if it was already reported. If you have additional information to provide about an existing issue, please comment there. You can use GitHub's \"Reactions\" feature if you only want to express support. Qualities of an excellent report \u00b6 The issue title should be descriptive. Vague titles make it difficult to understand the purpose of the issue, which might cause your issue to be overlooked. Provide a full set of steps necessary to reproduce the issue. Demonstration code or commands should be complete and simplified to the minimum necessary to reproduce the issue. Be responsive. We may need you to provide additional information in order to investigate and resolve the issue. If you find a solution to your problem, please comment on your issue report with an explanation of how you were able to fix it and close the issue. Pull Requests \u00b6 To propose improvements or fix a bug, feel free to submit a PR. Pull request checklist \u00b6 In order to ease code reviews and have your contributions merged faster, here is a list of items you can check before submitting a PR: Create small PRs that are narrowly focused on addressing a single concern. Write tests for the code you wrote. Maintain clean commit history and use meaningful commit messages . PRs with messy commit history are difficult to review and require a lot of work to be merged. If the PR contains a breaking change, please start the commit message and PR title with the string [breaking] . Don't forget to describe in the PR description what changes users might need to make in their workflow or application due to this PR. A breaking change is a change that forces users to change their command-line invocations or parsing of the JSON formatted output when upgrading from an older version of Arduino Lint. PR titles indirectly become part of the CHANGELOG so it's crucial to provide a good record of what change is being made in the title; why it was made will go in the PR description, along with a link to a GitHub issue if one exists. Open your PR against the main branch. Your PR must pass all CI tests before we will merge it. You can run the CI in your fork by clicking the \"Actions\" tab and then the \"I understand my workflows...\" button. If you're seeing an error and don't think it's your fault, it may not be! The reviewer will help you if there are test failures that seem not related to the change you are making. Development prerequisites \u00b6 To build Arduino Lint from sources you need the following tools to be available in your local environment: Go version 1.16 or later Taskfile to help you run the most common tasks from the command line If you want to run integration tests or work on documentation, you will also need: A working Python environment, version 3.8 or later. Poetry . Building the source code \u00b6 From the project folder root, just run: F task build The project uses Go modules, so dependencies will be downloaded automatically. At the end of the build, you should find the arduino-lint executable in the same folder. Running the tests \u00b6 There are several checks and test suites in place to ensure the code works as expected and is written in a way that's consistent across the whole codebase. To avoid pushing changes that will cause the CI system to fail, you can run most of the tests locally. To ensure code style is consistent, run: task check To run all tests: task test Go unit tests \u00b6 To run only the Go unit tests, run: task go:test-unit By default, all tests for all Arduino Lint's Go packages are run. To run unit tests for only one or more specific packages, you can set the TARGETS environment variable, e.g.: TARGETS=./internal/rule task go:test-unit Alternatively, to run only some specific test(s), you can specify a regex to match against the test function name, e.g.: TEST_REGEX='^TestLibraryProperties.*' task go:test-unit Both can be combined as well, typically to run only a specific test: TEST_REGEX='^TestFindProjects$' TARGETS=./internal/project task go:test-unit Integration tests \u00b6 Being a command line interface, Arduino Lint is heavily interactive and it has to stay consistent in accepting the user input and providing the expected output and proper exit codes. For these reasons, in addition to regular unit tests the project has a suite of integration tests that actually run arduino-lint in a different process and assess the options are correctly understood and the output is what we expect. Running tests \u00b6 After the software requirements have been installed, you should be able to run the tests with: task test-integration This will automatically install the necessary dependencies, if not already installed, and run the integration tests automatically. To run specific tests, you must run pytest from the virtual environment created by Poetry. poetry run pytest test/test_all.py::test_report_file You can avoid writing the poetry run prefix each time by creating a new shell inside the virtual environment: poetry shell pytest test_lib.py pytest test_lib.py::test_list Linting and formatting \u00b6 When editing any Python file in the project, remember to run linting checks with: task python:check This will run flake8 automatically and return any error in the code formatting. In case of linting errors you should be able to solve most of them by automatically formatting with: task python:format Configuration files formatting \u00b6 We use Prettier to automatically format all YAML files in the project. Keeping and enforcing a formatting standard helps everyone make small PRs and avoids the introduction of formatting changes made by unconfigured editors. There are several ways to run Prettier. If you're using Visual Studio Code you can easily use the prettier-vscode extension to automatically format as you write. Otherwise you can use the following tasks. To do so you'll need to install npm if not already installed. Check the official documentation to learn how to install npm for your platform. To check if the files are correctly formatted run: task config:check If the output tells you that some files are not formatted correctly run: task config:format Checks are automatically run on every pull request to verify that configuration files are correctly formatted. Working on documentation \u00b6 Documentation is provided to final users in form of static HTML content generated from a tool called MkDocs and hosted on GitHub Pages : https://arduino.github.io/arduino-lint/dev/ Local development \u00b6 The documentation consists of static content written over several Markdown files under the docs subfolder of the Arduino Lint repository, as well as the dynamically generated command line reference . When working on the documentation, it is useful to be able to see the effect the changes will have on the generated documentation website. You can build the documentation website and serve it from your personal computer by running the command: task docs:serve The documentation will build. If you don't see any error, open http://127.0.0.1:8000 in your browser to local the local copy of the documentation. Documentation formatting \u00b6 We use Prettier to automatically format all Markdown files in the project. Keeping and enforcing a formatting standard helps everyone make small PRs and avoids the introduction of formatting changes made by misconfigured editors. There are several ways to run Prettier. If you're using Visual Studio Code you can easily use the prettier-vscode extension to automatically format as you write. Otherwise you can use the following tasks. To do so you'll need to install npm if not already installed. Check the official documentation to learn how to install npm for your platform. To check if the files are correctly formatted run: task docs:check If the output tells you that some files are not formatted correctly run: task docs:format Checks are automatically run on every pull request to verify that documentation is correctly formatted. Documentation publishing \u00b6 The Arduino Lint git repository has a special branch called gh-pages that contains the generated HTML code for the documentation website. Every time a change is pushed to this special branch, GitHub automatically triggers a deployment to pull the change and publish a new version of the website. Do not open Pull Requests to push changes to the gh-pages branch; that will be done exclusively from the CI. For details on the documentation publishing system, see: https://github.com/arduino/arduino-lint/blob/main/docs/build.py","title":"How to contribute"},{"location":"CONTRIBUTING/#how-to-contribute","text":"First of all, thanks for contributing! This document provides some basic guidelines for contributing to this repository. There are several ways you can get involved: Type of contribution Contribution method - Support request - Question - Discussion Post on the Arduino Forum - Bug report - Feature request Issue report (read the issue guidelines ) Beta testing Try out the nightly build - Bug fix - Enhancement Pull Request (read the pull request guidelines ) Monetary - Donate - Buy official products","title":"How to contribute"},{"location":"CONTRIBUTING/#issue-reports","text":"Do you need help or have a question about using Arduino Lint? Support requests should be made to the Arduino forum . High quality bug reports and feature requests are valuable contributions to the Arduino Lint project.","title":"Issue Reports"},{"location":"CONTRIBUTING/#before-reporting-an-issue","text":"Give the nightly build a test drive to see if your issue was already resolved. Search existing pull requests and issues to see if it was already reported. If you have additional information to provide about an existing issue, please comment there. You can use GitHub's \"Reactions\" feature if you only want to express support.","title":"Before reporting an issue"},{"location":"CONTRIBUTING/#qualities-of-an-excellent-report","text":"The issue title should be descriptive. Vague titles make it difficult to understand the purpose of the issue, which might cause your issue to be overlooked. Provide a full set of steps necessary to reproduce the issue. Demonstration code or commands should be complete and simplified to the minimum necessary to reproduce the issue. Be responsive. We may need you to provide additional information in order to investigate and resolve the issue. If you find a solution to your problem, please comment on your issue report with an explanation of how you were able to fix it and close the issue.","title":"Qualities of an excellent report"},{"location":"CONTRIBUTING/#pull-requests","text":"To propose improvements or fix a bug, feel free to submit a PR.","title":"Pull Requests"},{"location":"CONTRIBUTING/#pull-request-checklist","text":"In order to ease code reviews and have your contributions merged faster, here is a list of items you can check before submitting a PR: Create small PRs that are narrowly focused on addressing a single concern. Write tests for the code you wrote. Maintain clean commit history and use meaningful commit messages . PRs with messy commit history are difficult to review and require a lot of work to be merged. If the PR contains a breaking change, please start the commit message and PR title with the string [breaking] . Don't forget to describe in the PR description what changes users might need to make in their workflow or application due to this PR. A breaking change is a change that forces users to change their command-line invocations or parsing of the JSON formatted output when upgrading from an older version of Arduino Lint. PR titles indirectly become part of the CHANGELOG so it's crucial to provide a good record of what change is being made in the title; why it was made will go in the PR description, along with a link to a GitHub issue if one exists. Open your PR against the main branch. Your PR must pass all CI tests before we will merge it. You can run the CI in your fork by clicking the \"Actions\" tab and then the \"I understand my workflows...\" button. If you're seeing an error and don't think it's your fault, it may not be! The reviewer will help you if there are test failures that seem not related to the change you are making.","title":"Pull request checklist"},{"location":"CONTRIBUTING/#development-prerequisites","text":"To build Arduino Lint from sources you need the following tools to be available in your local environment: Go version 1.16 or later Taskfile to help you run the most common tasks from the command line If you want to run integration tests or work on documentation, you will also need: A working Python environment, version 3.8 or later. Poetry .","title":"Development prerequisites"},{"location":"CONTRIBUTING/#building-the-source-code","text":"From the project folder root, just run: F task build The project uses Go modules, so dependencies will be downloaded automatically. At the end of the build, you should find the arduino-lint executable in the same folder.","title":"Building the source code"},{"location":"CONTRIBUTING/#running-the-tests","text":"There are several checks and test suites in place to ensure the code works as expected and is written in a way that's consistent across the whole codebase. To avoid pushing changes that will cause the CI system to fail, you can run most of the tests locally. To ensure code style is consistent, run: task check To run all tests: task test","title":"Running the tests"},{"location":"CONTRIBUTING/#go-unit-tests","text":"To run only the Go unit tests, run: task go:test-unit By default, all tests for all Arduino Lint's Go packages are run. To run unit tests for only one or more specific packages, you can set the TARGETS environment variable, e.g.: TARGETS=./internal/rule task go:test-unit Alternatively, to run only some specific test(s), you can specify a regex to match against the test function name, e.g.: TEST_REGEX='^TestLibraryProperties.*' task go:test-unit Both can be combined as well, typically to run only a specific test: TEST_REGEX='^TestFindProjects$' TARGETS=./internal/project task go:test-unit","title":"Go unit tests"},{"location":"CONTRIBUTING/#integration-tests","text":"Being a command line interface, Arduino Lint is heavily interactive and it has to stay consistent in accepting the user input and providing the expected output and proper exit codes. For these reasons, in addition to regular unit tests the project has a suite of integration tests that actually run arduino-lint in a different process and assess the options are correctly understood and the output is what we expect.","title":"Integration tests"},{"location":"CONTRIBUTING/#running-tests","text":"After the software requirements have been installed, you should be able to run the tests with: task test-integration This will automatically install the necessary dependencies, if not already installed, and run the integration tests automatically. To run specific tests, you must run pytest from the virtual environment created by Poetry. poetry run pytest test/test_all.py::test_report_file You can avoid writing the poetry run prefix each time by creating a new shell inside the virtual environment: poetry shell pytest test_lib.py pytest test_lib.py::test_list","title":"Running tests"},{"location":"CONTRIBUTING/#linting-and-formatting","text":"When editing any Python file in the project, remember to run linting checks with: task python:check This will run flake8 automatically and return any error in the code formatting. In case of linting errors you should be able to solve most of them by automatically formatting with: task python:format","title":"Linting and formatting"},{"location":"CONTRIBUTING/#configuration-files-formatting","text":"We use Prettier to automatically format all YAML files in the project. Keeping and enforcing a formatting standard helps everyone make small PRs and avoids the introduction of formatting changes made by unconfigured editors. There are several ways to run Prettier. If you're using Visual Studio Code you can easily use the prettier-vscode extension to automatically format as you write. Otherwise you can use the following tasks. To do so you'll need to install npm if not already installed. Check the official documentation to learn how to install npm for your platform. To check if the files are correctly formatted run: task config:check If the output tells you that some files are not formatted correctly run: task config:format Checks are automatically run on every pull request to verify that configuration files are correctly formatted.","title":"Configuration files formatting"},{"location":"CONTRIBUTING/#working-on-documentation","text":"Documentation is provided to final users in form of static HTML content generated from a tool called MkDocs and hosted on GitHub Pages : https://arduino.github.io/arduino-lint/dev/","title":"Working on documentation"},{"location":"CONTRIBUTING/#local-development","text":"The documentation consists of static content written over several Markdown files under the docs subfolder of the Arduino Lint repository, as well as the dynamically generated command line reference . When working on the documentation, it is useful to be able to see the effect the changes will have on the generated documentation website. You can build the documentation website and serve it from your personal computer by running the command: task docs:serve The documentation will build. If you don't see any error, open http://127.0.0.1:8000 in your browser to local the local copy of the documentation.","title":"Local development"},{"location":"CONTRIBUTING/#documentation-formatting","text":"We use Prettier to automatically format all Markdown files in the project. Keeping and enforcing a formatting standard helps everyone make small PRs and avoids the introduction of formatting changes made by misconfigured editors. There are several ways to run Prettier. If you're using Visual Studio Code you can easily use the prettier-vscode extension to automatically format as you write. Otherwise you can use the following tasks. To do so you'll need to install npm if not already installed. Check the official documentation to learn how to install npm for your platform. To check if the files are correctly formatted run: task docs:check If the output tells you that some files are not formatted correctly run: task docs:format Checks are automatically run on every pull request to verify that documentation is correctly formatted.","title":"Documentation formatting"},{"location":"CONTRIBUTING/#documentation-publishing","text":"The Arduino Lint git repository has a special branch called gh-pages that contains the generated HTML code for the documentation website. Every time a change is pushed to this special branch, GitHub automatically triggers a deployment to pull the change and publish a new version of the website. Do not open Pull Requests to push changes to the gh-pages branch; that will be done exclusively from the CI. For details on the documentation publishing system, see: https://github.com/arduino/arduino-lint/blob/main/docs/build.py","title":"Documentation publishing"},{"location":"installation/","text":"Use the install script \u00b6 The script requires sh , which is always available on Linux and macOS. sh is not available by default on Windows. The script can be run on Windows by installing Git for Windows , then running it from Git Bash. This script will install the latest version of Arduino Lint to $PWD/bin : curl -fsSL https://raw.githubusercontent.com/arduino/arduino-lint/main/etc/install.sh | sh If you want to target a different directory, for example ~/local/bin , set the BINDIR environment variable like this: curl -fsSL https://raw.githubusercontent.com/arduino/arduino-lint/main/etc/install.sh | BINDIR=~/local/bin sh If you would like to use the arduino-lint command from any location, install Arduino Lint to a directory already in your PATH or add the Arduino Lint installation path to your PATH environment variable. If you want to download a specific Arduino Lint version, for example 0.9.0 or nightly-latest , pass the version number as a parameter like this: curl -fsSL https://raw.githubusercontent.com/arduino/arduino-lint/main/etc/install.sh | sh -s 0.9.0 Download \u00b6 Pre-built binaries for all the supported platforms are available for download from the links below. If you would like to use the arduino-lint command from any location, extract the downloaded file to a directory already in your PATH or add the Arduino Lint installation path to your PATH environment variable. Latest release \u00b6 Platform Linux 32 bit 64 bit Linux ARM 32 bit 64 bit Windows 32 bit 64 bit macOS 64 bit Previous versions \u00b6 These are available from the \"Assets\" sections on the releases page . Nightly builds \u00b6 These builds are generated every day at 01:00 GMT from the main branch and should be considered unstable. In order to get the latest nightly build available for the supported platform, use the following links: Platform Linux 32 bit 64 bit Linux ARM 32 bit 64 bit Windows 32 bit 64 bit macOS 64 bit These links return a 302: Found response, redirecting to latest generated builds by replacing latest with the latest available build date, using the format YYYYMMDD (i.e for 2019-08-06 latest is replaced with 20190806 ) Checksums for the nightly builds are available at https://downloads.arduino.cc/arduino-lint/nightly/nightly-<DATE>-checksums.txt Build from source \u00b6 If you're familiar with Golang or if you want to contribute to the project, you will probably build Arduino Lint locally with your Go toolchain. See the \"How to contribute\" page for instructions.","title":"Installation"},{"location":"installation/#use-the-install-script","text":"The script requires sh , which is always available on Linux and macOS. sh is not available by default on Windows. The script can be run on Windows by installing Git for Windows , then running it from Git Bash. This script will install the latest version of Arduino Lint to $PWD/bin : curl -fsSL https://raw.githubusercontent.com/arduino/arduino-lint/main/etc/install.sh | sh If you want to target a different directory, for example ~/local/bin , set the BINDIR environment variable like this: curl -fsSL https://raw.githubusercontent.com/arduino/arduino-lint/main/etc/install.sh | BINDIR=~/local/bin sh If you would like to use the arduino-lint command from any location, install Arduino Lint to a directory already in your PATH or add the Arduino Lint installation path to your PATH environment variable. If you want to download a specific Arduino Lint version, for example 0.9.0 or nightly-latest , pass the version number as a parameter like this: curl -fsSL https://raw.githubusercontent.com/arduino/arduino-lint/main/etc/install.sh | sh -s 0.9.0","title":"Use the install script"},{"location":"installation/#download","text":"Pre-built binaries for all the supported platforms are available for download from the links below. If you would like to use the arduino-lint command from any location, extract the downloaded file to a directory already in your PATH or add the Arduino Lint installation path to your PATH environment variable.","title":"Download"},{"location":"installation/#latest-release","text":"Platform Linux 32 bit 64 bit Linux ARM 32 bit 64 bit Windows 32 bit 64 bit macOS 64 bit","title":"Latest release"},{"location":"installation/#previous-versions","text":"These are available from the \"Assets\" sections on the releases page .","title":"Previous versions"},{"location":"installation/#nightly-builds","text":"These builds are generated every day at 01:00 GMT from the main branch and should be considered unstable. In order to get the latest nightly build available for the supported platform, use the following links: Platform Linux 32 bit 64 bit Linux ARM 32 bit 64 bit Windows 32 bit 64 bit macOS 64 bit These links return a 302: Found response, redirecting to latest generated builds by replacing latest with the latest available build date, using the format YYYYMMDD (i.e for 2019-08-06 latest is replaced with 20190806 ) Checksums for the nightly builds are available at https://downloads.arduino.cc/arduino-lint/nightly/nightly-<DATE>-checksums.txt","title":"Nightly builds"},{"location":"installation/#build-from-source","text":"If you're familiar with Golang or if you want to contribute to the project, you will probably build Arduino Lint locally with your Go toolchain. See the \"How to contribute\" page for instructions.","title":"Build from source"},{"location":"commands/arduino-lint/","text":"arduino-lint \u00b6 Linter for Arduino projects. Synopsis \u00b6 Arduino Lint checks for specification compliance and other common problems with Arduino projects arduino-lint [FLAG]... [PROJECT_PATH]... Lint project in PROJECT_PATH or current path if no PROJECT_PATH argument provided. Options \u00b6 --compliance string Configure how strict the tool is. Can be {strict|specification|permissive} (default \"specification\") --format string The output format can be {text|json}. (default \"text\") -h, --help help for arduino-lint --library-manager string Configure the rules for libraries in the Arduino Library Manager index. Can be {submit|update|false}. submit: Also run additional rules required to pass before a library is accepted for inclusion in the index. update: Also run additional rules required to pass before new releases of a library already in the index are accepted. false: Don't run any Library Manager-specific rules. --project-type string Only lint projects of the specified type and their subprojects. Can be {sketch|library|platform|all}. (default \"all\") --recursive Search path recursively for Arduino projects to lint. Can be {true|false}. --report-file string Save a report on the rules to this file. -v, --verbose Show more information while running rules. --version Print version and timestamp of the build.","title":"Command reference"},{"location":"commands/arduino-lint/#arduino-lint","text":"Linter for Arduino projects.","title":"arduino-lint"},{"location":"commands/arduino-lint/#synopsis","text":"Arduino Lint checks for specification compliance and other common problems with Arduino projects arduino-lint [FLAG]... [PROJECT_PATH]... Lint project in PROJECT_PATH or current path if no PROJECT_PATH argument provided.","title":"Synopsis"},{"location":"commands/arduino-lint/#options","text":"--compliance string Configure how strict the tool is. Can be {strict|specification|permissive} (default \"specification\") --format string The output format can be {text|json}. (default \"text\") -h, --help help for arduino-lint --library-manager string Configure the rules for libraries in the Arduino Library Manager index. Can be {submit|update|false}. submit: Also run additional rules required to pass before a library is accepted for inclusion in the index. update: Also run additional rules required to pass before new releases of a library already in the index are accepted. false: Don't run any Library Manager-specific rules. --project-type string Only lint projects of the specified type and their subprojects. Can be {sketch|library|platform|all}. (default \"all\") --recursive Search path recursively for Arduino projects to lint. Can be {true|false}. --report-file string Save a report on the rules to this file. -v, --verbose Show more information while running rules. --version Print version and timestamp of the build.","title":"Options"}]}