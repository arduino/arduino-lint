version: "3"

includes:
  dist: ./DistTasks.yml

tasks:
  build:
    desc: Build the project
    cmds:
      - go build -v {{.LDFLAGS}}

  test:
    desc: Run tests
    cmds:
      - task: go:test-unit
      - task: test-integration
      - task: schema:compile

  go:generate:
    desc: Generate Go code
    cmds:
      - go get -u "github.com/go-bindata/go-bindata/...@v3.1.1"
      - go-bindata -nocompress -nometadata -o "./internal/rule/schema/schemadata/bindata.go" --pkg schemadata --prefix "./etc/schemas/" "./etc/schemas/"
      - go-bindata -nocompress -nometadata -o "./internal/rule/schema/testdata/bindata.go" --pkg testdata --prefix "./internal/rule/schema/testdata/input/" "./internal/rule/schema/testdata/input/"
      - go get -u golang.org/x/tools/cmd/stringer@v0.0.0-20201211192254-72fbef54948b
      - go generate ./...
      - task: go:format

  go:test-unit:
    desc: Run unit tests
    cmds:
      - go test -short -run '{{ default ".*" .TEST_REGEX }}' {{ default "-v" .GOFLAGS }} -coverprofile=coverage_unit.txt {{ default .DEFAULT_PACKAGES .PACKAGES }}

  test-integration:
    desc: Run integration tests
    cmds:
      - task: build
      - poetry install --no-root
      - poetry run pytest test

  schema:compile:
    desc: Compile JSON schema
    cmds:
      - npx ajv-cli compile -s "./etc/schemas/*.json"

  check:
    desc: Lint and check formatting of all files
    cmds:
      - task: go:check
      - task: python:check
      - task: docs:check
      - task: config:check
      - task: check-spelling

  lint:
    desc: Lint all files
    cmds:
      - task: go:lint
      - task: python:lint
      - task: docs:lint
      - task: config:lint

  check-formatting:
    desc: Check formatting of all files
    cmds:
      - task: go:check-formatting
      - task: docs:check-formatting
      - task: config:check-formatting

  format:
    desc: Format all files
    cmds:
      - task: go:format
      - task: python:format
      - task: docs:format
      - task: config:format

  go:check:
    desc: Lint and check formatting of Go code
    cmds:
      - task: go:lint
      - task: go:check-formatting

  go:lint:
    desc: Lint Go code
    cmds:
      - go vet {{ default .DEFAULT_PACKAGES .PACKAGES }}
      - |
        GOLINT_PATH="$(go list -f '{{"{{"}}.Target{{"}}"}}' golang.org/x/lint/golint || echo "false")"
        "$GOLINT_PATH" {{.GOLINTFLAGS}} "{{ default .DEFAULT_TARGETS .TARGETS }}"

  go:check-formatting:
    desc: Check Go code formatting
    cmds:
      - |
        RESULTS="$(gofmt -l {{ default .DEFAULT_PATHS .PATHS }})"
        echo "$RESULTS"
        test -z "$RESULTS"

  go:format:
    desc: Format Go code
    cmds:
      - gofmt -l -w {{ default .DEFAULT_PATHS .PATHS }}

  python:check:
    cmds:
      - task: python:lint

  python:lint:
    desc: Lint Python code
    cmds:
      - poetry install --no-root
      - poetry run flake8

  python:format:
    desc: Automatically formats Python files
    cmds:
      - poetry install --no-root
      - poetry run black .

  docs:gen:
    desc: Generate command reference
    dir: ./docsgen
    cmds:
      # docs will generate examples using os.Args[0] so we need to call
      # the generator `arduino-lint`
      - go build -o arduino-lint{{exeExt}}
      # we invoke `arduino-lint` like this instead of `./arduino-lint` to remove
      # the `./` chars from the examples
      - PATH=. arduino-lint ../docs/commands
      - task: docs:format

  docs:build:
    desc: Build documentation website contents
    cmds:
      - task: docs:gen
      - poetry install --no-root
      - poetry run mkdocs build --strict

  docs:publish:
    desc: Use Mike to build and push versioned docs
    cmds:
      - task: docs:gen
      - poetry run mike deploy --update-aliases --push --remote {{.DOCS_REMOTE}} {{.DOCS_VERSION}} {{.DOCS_ALIAS}}

  docs:serve:
    desc: Run documentation website locally
    cmds:
      - task: docs:build
      - poetry run mkdocs serve

  docs:check:
    desc: Lint and check formatting of documentation files
    cmds:
      - task: docs:check-formatting
      - task: docs:check-links

  docs:lint:
    desc: Lint documentation files
    cmds:
      - task: docs:check-license

  docs:check-license:
    desc: Check if the license file is correctly formatted
    cmds:
      - |
        EXPECTED_LICENSE_FILE="\"LICENSE.txt\""
        EXPECTED_LICENSE_TYPE="\"GPL-3.0\"" # https://spdx.org/licenses/

        # See: https://github.com/licensee/licensee
        LICENSEE_OUTPUT="$(licensee detect --json --confidence=100)"

        DETECTED_LICENSE_FILE="$(echo "$LICENSEE_OUTPUT" | jq .matched_files[0].filename | tr --delete '\r')"
        echo "Detected license file: $DETECTED_LICENSE_FILE"
        if [ "$DETECTED_LICENSE_FILE" != "$EXPECTED_LICENSE_FILE" ]; then
          echo "ERROR: detected license file doesn't match expected: $EXPECTED_LICENSE_FILE"
          exit 1
        fi

        DETECTED_LICENSE_TYPE="$(echo "$LICENSEE_OUTPUT" | jq .matched_files[0].matched_license | tr --delete '\r')"
        echo "Detected license type: $DETECTED_LICENSE_TYPE"
        if [ "$DETECTED_LICENSE_TYPE" != "$EXPECTED_LICENSE_TYPE" ]; then
          echo "ERROR: detected license type doesn't match expected $EXPECTED_LICENSE_TYPE"
          exit 1
        fi

  docs:check-links:
    desc: Check for dead links in documentation
    cmds:
      - |
        npx --package markdown-link-check --call '
        STATUS=0
        for file in $(find -name "*.md"); do
          markdown-link-check --quiet "$file"
          STATUS=$(( $STATUS + $? ))
        done
        exit $STATUS'

  docs:check-formatting:
    desc: Check formatting of documentation files
    cmds:
      - npx {{ .PRETTIER }} --check "**/*.md"

  docs:format:
    desc: Format documentation files
    cmds:
      - npx {{ .PRETTIER }} --write "**/*.md"

  shell:lint:
    desc: Lint shell scripts
    cmds:
      # https://github.com/koalaman/shellcheck
      - |
        shopt -s globstar # Needed to check all scripts recursively.
        shellcheck ./**/*.sh

  shell:check-formatting:
    desc: Format shell scripts
    cmds:
      # https://github.com/mvdan/sh#shfmt
      - shfmt -d .

  shell:format:
    desc: Format shell scripts
    cmds:
      - shfmt -l -w .

  config:check:
    desc: Lint and check formatting of configuration files
    cmds:
      - task: config:check-formatting
      - task: config:lint

  config:lint:
    desc: Lint configuration files
    cmds:
      - task: workflow:validate

  workflow:validate:
    desc: Validate GitHub Actions workflows against JSON schema
    cmds:
      - wget --output-document={{ .WORKFLOW_SCHEMA_PATH }} https://json.schemastore.org/github-workflow
      - npx ajv-cli validate --strict=false -s {{ .WORKFLOW_SCHEMA_PATH }} -d "./.github/workflows/*.{yml,yaml}"

  config:check-formatting:
    desc: Check formatting of configuration files
    cmds:
      - npx {{ .PRETTIER }} --check "**/*.{yml,yaml}"
      - npx {{ .PRETTIER }} --check "**/*.json"

  config:format:
    desc: Format configuration files
    cmds:
      - npx {{ .PRETTIER }} --write "**/*.{yml,yaml}"
      - npx {{ .PRETTIER }} --write "**/*.json"

  check-spelling:
    desc: Check for commonly misspelled words
    cmds:
      - poetry install --no-root
      - poetry run codespell {{ .CODESPELL_SKIP_OPTION }} {{ .CODESPELL_IGNORE_WORDS_OPTION }}

  correct-spelling:
    desc: Correct commonly misspelled words where possible
    cmds:
      - poetry install --no-root
      - poetry run codespell --write-changes {{ .CODESPELL_SKIP_OPTION }} {{ .CODESPELL_IGNORE_WORDS_OPTION }}

vars:
  PROJECT_NAME: "arduino-lint"
  DIST_DIR: "dist"
  DEFAULT_PACKAGES:
    sh: echo `go list ./... | tr '\n' ' '`
  DEFAULT_PATHS:
    sh: echo '`go list -f '{{"{{"}}.Dir{{"}}"}}' ./...`'
  # build vars
  COMMIT:
    sh: echo "$(git log -n 1 --format=%h)"
  TIMESTAMP:
    sh: echo "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
  TIMESTAMP_SHORT:
    sh: echo "{{now | date "20060102"}}"
  TAG:
    sh: echo "`git tag --points-at=HEAD 2> /dev/null`"
  VERSION: "{{ if .NIGHTLY }}nightly-{{ .TIMESTAMP_SHORT }}{{ else if .TAG }}{{ .TAG }}{{ else }}snapshot{{ end }}"
  CONFIGURATION_PACKAGE: "github.com/arduino/{{ .PROJECT_NAME }}/internal/configuration"
  LDFLAGS: >-
    -ldflags
    '
    -X {{ .CONFIGURATION_PACKAGE }}.version={{.VERSION}}
    -X {{ .CONFIGURATION_PACKAGE }}.commit={{.COMMIT}}
    -X {{ .CONFIGURATION_PACKAGE }}.buildTimestamp={{.TIMESTAMP}}
    '
  GOFLAGS: "-timeout 10m -v -coverpkg=./... -covermode=atomic"
  GOLINTFLAGS: "-min_confidence 0.8 -set_exit_status"

  DOCS_VERSION: dev
  DOCS_ALIAS: ""
  DOCS_REMOTE: "origin"

  PRETTIER: prettier@2.1.2

  WORKFLOW_SCHEMA_PATH: "$(mktemp -t gha-workflow-schema-XXXXXXXXXX.json)"

  CODESPELL_SKIP_OPTION: '--skip "./.git,go.mod,go.sum,./arduino-lint,./arduino-lint.exe,./internal/rule/rulefunction/testdata/libraries/MisspelledSentenceParagraphValue/library.properties,./site"'
  CODESPELL_IGNORE_WORDS_OPTION: "--ignore-words ./etc/codespell-ignore-words-list.txt"
