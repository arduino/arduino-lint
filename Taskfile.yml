# See: https://taskfile.dev/#/usage
version: "3"

includes:
  dist: ./DistTasks.yml

vars:
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/npm-task/Taskfile.yml
  # Path of the project's primary npm-managed project:
  DEFAULT_NPM_PROJECT_PATH: .
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/release-go-task/Taskfile.yml
  PROJECT_NAME: "arduino-lint"
  DIST_DIR: "dist"
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/go-task/Taskfile.yml
  # Path of the project's primary Go module:
  DEFAULT_GO_MODULE_PATH: .
  DEFAULT_GO_PACKAGES: |
    $( \
      go list \
        ./... \
      | \
      grep \
        --invert-match \
        'github.com/arduino/arduino-lint/internal/rule/schema/schemadata' \
      | \
      tr \
        '\n' \
        ' ' \
      || \
      echo '"ERROR: Unable to discover Go packages"' \
    )
  # build vars
  COMMIT:
    sh: |
      echo \
        "$(
          git log \
            --no-show-signature \
            -n 1 \
            --format=%h
        )"
  TIMESTAMP:
    sh: |
      echo \
        "$(
          date \
            -u \
            +"%Y-%m-%dT%H:%M:%SZ"
        )"
  TIMESTAMP_SHORT:
    sh: echo "{{now | date "20060102"}}"
  TAG:
    sh: |
      echo \
        "$(
          git tag \
            --points-at=HEAD \
          2>/dev/null \
          | \
          head -n1
        )"
  VERSION: "{{if .NIGHTLY}}nightly-{{.TIMESTAMP_SHORT}}{{else if .TAG}}{{.TAG}}{{else}}{{.PACKAGE_NAME_PREFIX}}git-snapshot{{end}}"
  CONFIGURATION_PACKAGE: "github.com/arduino/{{.PROJECT_NAME}}/internal/configuration"
  LDFLAGS: >-
    -ldflags
    '
    -X {{.CONFIGURATION_PACKAGE}}.Version={{.VERSION}}
    -X {{.CONFIGURATION_PACKAGE}}.Commit={{.COMMIT}}
    -X {{.CONFIGURATION_PACKAGE}}.Timestamp={{.TIMESTAMP}}
    '
  # `-ldflags` flag to use for `go test` command
  TEST_LDFLAGS:

tasks:
  build:
    desc: Build the project
    deps:
      - task: go:build

  check:
    desc: Check for problems with the project
    cmds:
      - task: ci:validate
      - task: general:check-formatting
      - task: general:check-spelling
      - task: go:test
      - task: go:test
        vars:
          GO_MODULE_PATH: ./ruledocsgen
      - task: go:test-integration
      - task: go:vet
      - task: go:vet
        vars:
          GO_MODULE_PATH: ./docsgen
      - task: go:vet
        vars:
          GO_MODULE_PATH: ./ruledocsgen
      - task: go:lint
      - task: go:lint
        vars:
          GO_MODULE_PATH: ./docsgen
      - task: go:lint
        vars:
          GO_MODULE_PATH: ./ruledocsgen
      - task: markdown:lint
      - task: markdown:check-links
      - task: poetry:validate
      - task: python:lint
      - task: shell:check
        vars:
          SCRIPT_PATH: etc/install.sh
      - task: shell:check-mode
        vars:
          SCRIPT_PATH: etc/install.sh
      - task: website:check

  fix:
    desc: Make automated corrections to the project's files
    deps:
      - task: general:format-prettier
      - task: general:correct-spelling
      - task: go:generate
      - task: go:fix
      - task: go:fix
        vars:
          GO_MODULE_PATH: ./docsgen
      - task: go:fix
        vars:
          GO_MODULE_PATH: ./ruledocsgen
      - task: go:format
      - task: go:format
        vars:
          GO_MODULE_PATH: ./docsgen
      - task: go:format
        vars:
          GO_MODULE_PATH: ./ruledocsgen
      - task: go:tidy
      - task: go:tidy
        vars:
          GO_MODULE_PATH: ./docsgen
      - task: go:tidy
        vars:
          GO_MODULE_PATH: ./ruledocsgen
      - task: markdown:fix
      - task: npm:fix-config
      - task: poetry:sync
      - task: python:format
      - task: shell:format
        vars:
          SCRIPT_PATH: etc/install.sh

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-workflows-task/Taskfile.yml
  ci:validate:
    desc: Validate GitHub Actions workflows against their JSON schema
    vars:
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/github-workflow.json
      WORKFLOW_SCHEMA_URL: https://json.schemastore.org/github-workflow
      WORKFLOW_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="workflow-schema-XXXXXXXXXX.json"
      WORKFLOWS_DATA_PATH: "./.github/workflows/*.{yml,yaml}"
    deps:
      - task: npm:install-deps
        vars:
          PROJECT_PATH: .
    cmds:
      - |
        wget \
          --quiet \
          --output-document="{{.WORKFLOW_SCHEMA_PATH}}" \
          {{.WORKFLOW_SCHEMA_URL}}
      - |
        npx \
          --package=ajv-cli \
          --package=ajv-formats \
          ajv validate \
            --all-errors \
            --strict=false \
            -c ajv-formats \
            -s "{{.WORKFLOW_SCHEMA_PATH}}" \
            -d "{{.WORKFLOWS_DATA_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/deploy-cobra-mkdocs-versioned-poetry/Taskfile.yml
  docs:generate:
    desc: Create all generated documentation content
    run: when_changed
    deps:
      - task: go:cli-docs
      - task: go:rule-docs
    cmds:
      # Make the formatting consistent with the non-generated Markdown
      - task: general:format-prettier

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-dependencies-task/Taskfile.yml
  general:cache-dep-licenses:
    desc: Cache dependency license metadata
    deps:
      - task: general:prepare-deps
    cmds:
      - |
        if ! which licensed &>/dev/null; then
          if [[ {{OS}} == "windows" ]]; then
            echo "Licensed does not have Windows support."
            echo "Please use Linux/macOS or download the dependencies cache from the GitHub Actions workflow artifact."
          else
            echo "licensed not found or not in PATH."
            echo "Please install: https://github.com/licensee/licensed#installation"
          fi
          exit 1
        fi
      - licensed cache

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-dependencies-task/Taskfile.yml
  general:check-dep-licenses:
    desc: Check for unapproved dependency licenses
    deps:
      - task: general:cache-dep-licenses
    cmds:
      - licensed status

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-general-formatting-task/Taskfile.yml
  general:check-formatting:
    desc: Check basic formatting style of all files
    cmds:
      - |
        if
          ! which ec \
          &>/dev/null
        then
          echo "ec not found or not in PATH."
          echo "Please install: https://github.com/editorconfig-checker/editorconfig-checker#installation"
          exit 1
        fi
      - ec

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/spell-check-task/Taskfile.yml
  general:check-spelling:
    desc: Check for commonly misspelled words
    deps:
      - task: poetry:install-deps
        vars:
          POETRY_GROUPS: dev
    cmds:
      - |
        if
          ! poetry run \
            codespell
        then
          echo
          echo "If this was a false positive, add the word to the ignore list:"
          echo "https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/spell-check-task.md#false-positives"
          exit 1
        fi

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/spell-check-task/Taskfile.yml
  general:correct-spelling:
    desc: Correct commonly misspelled words where possible
    deps:
      - task: poetry:install-deps
        vars:
          POETRY_GROUPS: dev
    cmds:
      - |
        poetry run \
          codespell \
            --write-changes

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-prettier-formatting-task/Taskfile.yml
  general:format-prettier:
    desc: Format all supported files with Prettier
    deps:
      - task: npm:install-deps
        vars:
          PROJECT_PATH: .
    cmds:
      - |
        npx \
          prettier \
            --write \
            .

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-dependencies-task/Taskfile.yml
  general:prepare-deps:
    desc: Prepare project dependencies for license check
    # No preparation is needed for Go module-based projects.

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/go-task/Taskfile.yml
  go:build:
    desc: Build the Go code
    dir: "{{.DEFAULT_GO_MODULE_PATH}}"
    cmds:
      - |
        go build \
          -v \
          {{.LDFLAGS}}

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/deploy-cobra-mkdocs-versioned-poetry/Taskfile.yml
  go:cli-docs:
    desc: Generate command line interface reference documentation
    dir: ./docsgen
    cmds:
      # Command examples use os.Args[0] so the docs generation binary must have the same filename as the project
      - go build -o {{.PROJECT_NAME}}{{exeExt}}
      # The binary is invoked like this instead of `./{{.PROJECT_NAME}}` to remove the `./` chars from the examples
      - PATH=. {{.PROJECT_NAME}} ../docs/commands

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:fix:
    desc: |
      Modernize usages of outdated APIs.
      Environment variable parameters:
      - GO_MODULE_PATH: Path of the Go module root (default: {{.DEFAULT_GO_MODULE_PATH}}).
      - GO_PACKAGES: List of Go packages to modernize (default: all packages of the module).
    dir: "{{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}}"
    cmds:
      - go fix {{default .DEFAULT_GO_PACKAGES .GO_PACKAGES}}

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:format:
    desc: |
      Format Go code.
      Environment variable parameters:
      - GO_MODULE_PATH: Path of the Go module root (default: {{.DEFAULT_GO_MODULE_PATH}}).
      - GO_PACKAGES: List of Go packages to modernize (default: all packages of the module).
    dir: "{{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}}"
    cmds:
      - go fmt {{default .DEFAULT_GO_PACKAGES .GO_PACKAGES}}

  go:generate:
    desc: Generate Go code
    cmds:
      - go install "github.com/go-bindata/go-bindata/...@v3.1.1"
      - go-bindata -nocompress -nometadata -o "./internal/rule/schema/schemadata/bindata.go" --pkg schemadata --prefix "./etc/schemas/" "./etc/schemas/"
      - go-bindata -nocompress -nometadata -o "./internal/rule/schema/testdata/bindata.go" --pkg testdata --prefix "./internal/rule/schema/testdata/input/" "./internal/rule/schema/testdata/input/"
      - go install golang.org/x/tools/cmd/stringer@v0.25.0
      - go generate ./...
      - task: go:format

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:lint:
    desc: |
      Lint Go code
      Environment variable parameters:
      - GO_MODULE_PATH: Path of the Go module root (default: {{.DEFAULT_GO_MODULE_PATH}}).
      - GO_PACKAGES: List of Go packages to modernize (default: all packages of the module).
    dir: "{{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}}"
    cmds:
      - |
        if ! which golint &>/dev/null; then
          echo "golint not installed or not in PATH. Please install: https://github.com/golang/lint#installation"
          exit 1
        fi
      - |
        golint \
          {{default "-min_confidence 0.8 -set_exit_status" .GO_LINT_FLAGS}} \
          {{default .DEFAULT_GO_PACKAGES .GO_PACKAGES}}

  go:rule-docs:
    desc: Generate rules documentation
    dir: ./ruledocsgen
    deps:
      - task: go:rule-docs:build
    cmds:
      - ./ruledocsgen ../docs/rules

  go:rule-docs:build:
    desc: Generate rules documentation
    dir: ./ruledocsgen
    cmds:
      - go build

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/test-go-task/Taskfile.yml
  go:test:
    desc: |
      Run unit tests.
      Environment variable parameters:
      - GO_MODULE_PATH: Path of the Go module root (default: {{.DEFAULT_GO_MODULE_PATH}}).
      - GO_PACKAGES: List of Go packages to test (default: all packages of the module).
    dir: "{{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}}"
    cmds:
      - |
        go test \
          -v \
          -short \
          -run '{{default ".*" .GO_TEST_REGEX}}' \
          {{default "-timeout 10m -coverpkg=./... -covermode=atomic" .GO_TEST_FLAGS}} \
          -coverprofile=coverage_unit.txt \
          {{.TEST_LDFLAGS}} \
          {{default .DEFAULT_GO_PACKAGES .GO_PACKAGES}}

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/test-go-integration-task/Taskfile.yml
  go:test-integration:
    desc: Run integration tests
    deps:
      - task: go:build
      - task: go:rule-docs:build
      - task: poetry:install-deps
        vars:
          POETRY_GROUPS: dev
    cmds:
      - |
        poetry run \
          pytest \
            tests
      - |
        poetry run \
          pytest \
            ruledocsgen/tests

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:tidy:
    desc: |
      Refresh dependency metadata.
      Environment variable parameters:
      - GO_MODULE_PATH: Path of the Go module root (default: {{.DEFAULT_GO_MODULE_PATH}}).
    dir: "{{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}}"
    vars:
      GO_VERSION: 1.24.0
    cmds:
      - go mod tidy -compat={{.GO_VERSION}}

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:vet:
    desc: |
      Check for errors in Go code.
      Environment variable parameters:
      - GO_MODULE_PATH: Path of the Go module root (default: {{.DEFAULT_GO_MODULE_PATH}}).
      - GO_PACKAGES: List of Go packages to test (default: all packages of the module).
    dir: "{{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}}"
    cmds:
      - go vet {{default .DEFAULT_GO_PACKAGES .GO_PACKAGES}}

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:check-links:
    desc: Check for broken links
    vars:
      # The command is defined in a Taskfile variable to allow it to be broken into multiple lines for readability.
      # This can't be done in the `cmd` object of the Taskfile because `npx --call` uses the native shell, which causes
      # standard newline escaping syntax to not work when the task is run on Windows.
      #
      # Using -regex instead of -name to avoid Task's behavior of globbing even when quoted on Windows
      # The odd method for escaping . in the regex is required for windows compatibility because mvdan.cc/sh gives
      # \ characters special treatment on Windows in an attempt to support them as path separators.
      #
      # prettier-ignore
      CHECK_LINKS_COMMAND:
        "
          find . \
            -type d -name \".git\" -prune -o \
            -type d -name \".licenses\" -prune -o \
            -type d -name \"__pycache__\" -prune -o \
            -type d -name \"node_modules\" -prune -o \
            -regex \".*[.]md\" \
            -exec \
              markdown-link-check \
                --quiet \
                --config \"./.markdown-link-check.json\" \
                \\{\\} \
                +
        "
    deps:
      - task: docs:generate
      - task: npm:install-deps
        vars:
          PROJECT_PATH: .
    cmds:
      - |
        npx \
          --package=markdown-link-check \
          --call='{{.CHECK_LINKS_COMMAND}}'

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:fix:
    desc: Automatically correct linting violations in Markdown files where possible
    deps:
      - task: npm:install-deps
        vars:
          PROJECT_PATH: .
    cmds:
      - |
        npx \
          markdownlint-cli \
            --fix \
            "**/*.md"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:lint:
    desc: Check for problems in Markdown files
    deps:
      - task: npm:install-deps
        vars:
          PROJECT_PATH: .
    cmds:
      - |
        npx \
          markdownlint-cli \
            "**/*.md"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-npm-task/Taskfile.yml
  npm:fix-config:
    desc: |
      Fix problems with the npm configuration file.
      Environment variable parameters:
      - PROJECT_PATH: Path of the npm-managed project (default: {{.DEFAULT_NPM_PROJECT_PATH}}).
    dir: "{{default .DEFAULT_NPM_PROJECT_PATH .PROJECT_PATH}}"
    cmds:
      - |
        npm config \
          --location project \
          fix

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/npm-task/Taskfile.yml
  npm:install-deps:
    desc: |
      Install dependencies managed by npm.
      Environment variable parameters:
      - PROJECT_PATH: Path of the npm-managed project (default: {{.DEFAULT_NPM_PROJECT_PATH}}).
    run: when_changed
    dir: |
      "{{default .DEFAULT_NPM_PROJECT_PATH .PROJECT_PATH}}"
    cmds:
      - npm install

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-npm-task/Taskfile.yml
  npm:validate:
    desc: |
      Validate npm configuration files against their JSON schema.
      Environment variable parameters:
      - PROJECT_PATH: Path of the npm-managed project (default: {{.DEFAULT_NPM_PROJECT_PATH}}).
    deps:
      - task: npm:install-deps
    vars:
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/package.json
      SCHEMA_URL: https://json.schemastore.org/package.json
      SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="package-json-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/ava.json
      AVA_SCHEMA_URL: https://json.schemastore.org/ava.json
      AVA_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="ava-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/base.json
      BASE_SCHEMA_URL: https://json.schemastore.org/base.json
      BASE_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="base-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/eslintrc.json
      ESLINTRC_SCHEMA_URL: https://json.schemastore.org/eslintrc.json
      ESLINTRC_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="eslintrc-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/jscpd.json
      JSCPD_SCHEMA_URL: https://json.schemastore.org/jscpd.json
      JSCPD_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="jscpd-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/npm-badges.json
      NPM_BADGES_SCHEMA_URL: https://json.schemastore.org/npm-badges.json
      NPM_BADGES_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="npm-badges-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/partial-eslint-plugins.json
      PARTIAL_ESLINT_PLUGINS_SCHEMA_URL: https://json.schemastore.org/partial-eslint-plugins.json
      PARTIAL_ESLINT_PLUGINS_PATH:
        sh: task utility:mktemp-file TEMPLATE="partial-eslint-plugins-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/prettierrc.json
      PRETTIERRC_SCHEMA_URL: https://json.schemastore.org/prettierrc.json
      PRETTIERRC_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="prettierrc-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/semantic-release.json
      SEMANTIC_RELEASE_SCHEMA_URL: https://json.schemastore.org/semantic-release.json
      SEMANTIC_RELEASE_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="semantic-release-schema-XXXXXXXXXX.json"
      # Source: https://github.com/SchemaStore/schemastore/blob/master/src/schemas/json/stylelintrc.json
      STYLELINTRC_SCHEMA_URL: https://json.schemastore.org/stylelintrc.json
      STYLELINTRC_SCHEMA_PATH:
        sh: task utility:mktemp-file TEMPLATE="stylelintrc-schema-XXXXXXXXXX.json"
      INSTANCE_PATH: >-
        {{default .DEFAULT_NPM_PROJECT_PATH .PROJECT_PATH}}/package.json
    cmds:
      - wget --quiet --output-document="{{.SCHEMA_PATH}}" {{.SCHEMA_URL}}
      - wget --quiet --output-document="{{.AVA_SCHEMA_PATH}}" {{.AVA_SCHEMA_URL}}
      - wget --quiet --output-document="{{.BASE_SCHEMA_PATH}}" {{.BASE_SCHEMA_URL}}
      - wget --quiet --output-document="{{.ESLINTRC_SCHEMA_PATH}}" {{.ESLINTRC_SCHEMA_URL}}
      - wget --quiet --output-document="{{.JSCPD_SCHEMA_PATH}}" {{.JSCPD_SCHEMA_URL}}
      - wget --quiet --output-document="{{.NPM_BADGES_SCHEMA_PATH}}" {{.NPM_BADGES_SCHEMA_URL}}
      - wget --quiet --output-document="{{.PARTIAL_ESLINT_PLUGINS_PATH}}" {{.PARTIAL_ESLINT_PLUGINS_SCHEMA_URL}}
      - wget --quiet --output-document="{{.PRETTIERRC_SCHEMA_PATH}}" {{.PRETTIERRC_SCHEMA_URL}}
      - wget --quiet --output-document="{{.SEMANTIC_RELEASE_SCHEMA_PATH}}" {{.SEMANTIC_RELEASE_SCHEMA_URL}}
      - wget --quiet --output-document="{{.STYLELINTRC_SCHEMA_PATH}}" {{.STYLELINTRC_SCHEMA_URL}}
      - |
        npx \
          --package=ajv-cli \
          --package=ajv-formats \
          ajv validate \
            --all-errors \
            --strict=false \
            -s "{{.SCHEMA_PATH}}" \
            -r "{{.AVA_SCHEMA_PATH}}" \
            -r "{{.BASE_SCHEMA_PATH}}" \
            -r "{{.ESLINTRC_SCHEMA_PATH}}" \
            -r "{{.JSCPD_SCHEMA_PATH}}" \
            -r "{{.NPM_BADGES_SCHEMA_PATH}}" \
            -r "{{.PARTIAL_ESLINT_PLUGINS_PATH}}" \
            -r "{{.PRETTIERRC_SCHEMA_PATH}}" \
            -r "{{.SEMANTIC_RELEASE_SCHEMA_PATH}}" \
            -r "{{.STYLELINTRC_SCHEMA_PATH}}" \
            -d "{{.INSTANCE_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/poetry-task/Taskfile.yml
  poetry:install:
    desc: Install Poetry
    run: when_changed
    cmds:
      - |
        if ! which go &>/dev/null; then
          echo "Go not found or not in PATH."
          echo "Please install: https://go.dev/doc/install"
          exit 1
        fi
      - |
        if ! which python &>/dev/null; then
          python_constraint="$( \
            yq \
              --input-format toml \
              --output-format yaml \
              '.tool.poetry.dependencies.python' \
            <pyproject.toml
          )"

          echo "Python not found or not in PATH."
          echo "Please install a version of Python satisfying the constraint ${python_constraint}:"
          echo "https://wiki.python.org/moin/BeginnersGuide/Download"
          exit 1
        fi
      - |
        if ! which pipx &>/dev/null; then
          echo "pipx not found or not in PATH."
          echo "Please install: https://pipx.pypa.io/stable/installation/#installing-pipx"
          exit 1
        fi
      - |
        export PIPX_DEFAULT_PYTHON="$( \
          task utility:normalize-path \
            RAW_PATH="$(which python)" \
        )"

        poetry_constraint="$( \
          go tool \
            github.com/mikefarah/yq/v4 \
              --input-format toml \
              --output-format yaml \
              '.tool.poetry.group.pipx.dependencies.poetry' \
          <pyproject.toml
        )"

        pipx install \
          --force \
          "poetry==$poetry_constraint"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/poetry-task/Taskfile.yml
  poetry:install-deps:
    desc: |
      Install dependencies managed by Poetry.
      Environment variable parameters:
      - POETRY_GROUPS: Poetry dependency groups to install (default: install all dependencies).
    run: when_changed
    deps:
      - task: poetry:install
    cmds:
      - |
        poetry install \
          {{if .POETRY_GROUPS}} --only {{.POETRY_GROUPS}} {{end}}

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-poetry-task/Taskfile.yml
  poetry:sync:
    desc: Sync Poetry lockfile
    deps:
      - task: poetry:install
    cmds:
      - |
        poetry lock \
          --no-cache

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/poetry-task/Taskfile.yml
  poetry:update-deps:
    desc: Update all dependencies managed by Poetry to their newest versions
    deps:
      - task: poetry:install
    cmds:
      - poetry update

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-poetry-task/Taskfile.yml
  poetry:validate:
    desc: Validate Poetry configuration
    deps:
      - task: poetry:install
    cmds:
      - |
        poetry check \
          --lock \
          --strict

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-python-task/Taskfile.yml
  python:format:
    desc: Format Python files
    deps:
      - task: poetry:install-deps
        vars:
          POETRY_GROUPS: dev
    cmds:
      - |
        poetry run \
          black \
            .

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-python-task/Taskfile.yml
  python:lint:
    desc: Lint Python code
    deps:
      - task: poetry:install-deps
        vars:
          POETRY_GROUPS: dev
    cmds:
      - |
        poetry run \
          flake8 \
            --show-source

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-shell-task/Taskfile.yml
  shell:check:
    desc: |
      Check for problems with shell scripts.
      Environment variable parameters:
      - SCRIPT_PATH: path of the script to be checked.
    cmds:
      - |
        if [[ "{{.SCRIPT_PATH}}" == "" ]]; then
          echo "Path to script file must be passed to this task via the SCRIPT_PATH taskfile variable."
          echo "See: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/check-shell-task.md#usage"
          exit 1
        fi
      - |
        if ! which shellcheck &>/dev/null; then
          echo "shellcheck not installed or not in PATH."
          echo "Please install: https://github.com/koalaman/shellcheck#installing"
          exit 1
        fi
      - |
        shellcheck \
          --format={{default "tty" .SHELLCHECK_FORMAT}} \
          "{{.SCRIPT_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-shell-task/Taskfile.yml
  shell:check-mode:
    desc: |
      Check for non-executable shell scripts.
      Environment variable parameters:
      - SCRIPT_PATH: path of the script to be checked.
    cmds:
      - |
        if [[ "{{.SCRIPT_PATH}}" == "" ]]; then
          echo "Path to script file must be passed to this task via the SCRIPT_PATH taskfile variable."
          echo "See: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/check-shell-task.md#usage"
          exit 1
        fi
      - |
        test -x "{{.SCRIPT_PATH}}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-shell-task/Taskfile.yml
  shell:format:
    desc: |
      Format shell script files.
      Environment variable parameters:
      - SCRIPT_PATH: path of the script to be formatted.
    cmds:
      - |
        if [[ "{{.SCRIPT_PATH}}" == "" ]]; then
          echo "Path to script file must be passed to this task via the SCRIPT_PATH taskfile variable."
          echo "See: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/check-shell-task.md#usage"
          exit 1
        fi
      - |
        if ! which shfmt &>/dev/null; then
          echo "shfmt not installed or not in PATH. Please install: https://github.com/mvdan/sh#shfmt"
          exit 1
        fi
      - shfmt -w "{{.SCRIPT_PATH}}"

  # Make a temporary file and print the path passed to stdout.
  # Environment variable parameters:
  # - TEMPLATE: template for the format of the filename.
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/windows-task/Taskfile.yml
  utility:mktemp-file:
    vars:
      RAW_PATH:
        sh: mktemp --tmpdir "{{.TEMPLATE}}"
    cmds:
      - task: utility:normalize-path
        vars:
          RAW_PATH: "{{.RAW_PATH}}"

  # Print a normalized version of the path to stdout.
  # Environment variable parameters:
  # - RAW_PATH: the path to be normalized.
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/windows-task/Taskfile.yml
  utility:normalize-path:
    cmds:
      - |
        if
          [[ "{{.OS}}" == "Windows_NT" ]] \
          && \
          which cygpath \
          &>/dev/null
        then
          # Even though the shell handles POSIX format absolute paths as expected, external applications do not.
          # So paths passed to such applications must first be converted to Windows format.
          cygpath \
            -w \
            "{{.RAW_PATH}}"
        else
          echo "{{.RAW_PATH}}"
        fi

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-mkdocs-task/Taskfile.yml
  website:check:
    desc: Check whether the MkDocs-based website will build
    deps:
      - task: docs:generate
      - task: poetry:install-deps
        vars:
          POETRY_GROUPS: dev
    cmds:
      - |
        poetry run \
          mkdocs build \
            --strict

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-mkdocs-task/Taskfile.yml
  website:serve:
    desc: Run website locally
    deps:
      - task: docs:generate
      - task: poetry:install-deps
        vars:
          POETRY_GROUPS: dev
    cmds:
      - |
        poetry run \
          mkdocs serve
